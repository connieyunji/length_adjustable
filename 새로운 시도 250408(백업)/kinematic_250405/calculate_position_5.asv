function [position_5_x, position_5_y] = calculate_position_5(position_8_x, position_8_y, position_4_x, position_4_y, l5, l8)

    % 벡터 간 거리 계산
    d = sqrt((position_8_x - position_4_x).^2 + (position_8_y - position_4_y).^2);

    % 코사인 법칙을 이용한 각도 계산
    cos_theta_8 = (l8^2 + d.^2 - l5^2) ./ (2 * l8 .* d);
    cos_theta_8 = max(min(cos_theta_8, 1), -1);  % acosd 오류 방지
    ang_5_8_4 = acosd(cos_theta_8);

    ang_4_8_x = rad2deg(atan2(position_4_y - position_8_y, position_4_x - position_8_x));

    % 최종 각도 계산
    angle_option = ang_4_8_x + ang_5_8_4;

    % 위치 계산
    position_5_x = position_8_x + l8 * cosd(angle_option);
    position_5_y = position_8_y + l8 * sind(angle_option);

    % 거리 확인
    distance_8_5 = sqrt((position_5_x - position_8_x).^2 + (position_5_y - position_8_y).^2);
    distance_5_4 = sqrt((position_5_x - position_4_x).^2 + (position_5_y - position_4_y).^2);

    % 허용 오차
    tol = 1e-2;

    % 삼각형 조건
    triangle_valid = (l5 + l8 > d) & (l5 + d > l8) & (l8 + d > l5);

    % 유효하지 않은 경우 NaN 처리
    invalid_idx = abs(distance_8_5 - l8) > tol | abs(distance_5_4 - l5) > tol | ~triangle_valid;
    position_5_x(invalid_idx) = NaN;
    position_5_y(invalid_idx) = NaN;

end
